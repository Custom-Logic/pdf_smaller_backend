[tool:pytest]
# Pytest configuration for PDF Smaller Backend

# Test discovery
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test paths
testpaths = tests

# Minimum version
minversion = 6.0

# Add options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
    --durations=10

# Markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    tasks: marks tests related to Celery tasks
    services: marks tests related to service classes
    models: marks tests related to database models
    api: marks tests related to API endpoints
    auth: marks tests related to authentication
    compression: marks tests related to PDF compression
    conversion: marks tests related to PDF conversion
    ocr: marks tests related to OCR functionality
    ai: marks tests related to AI features
    extraction: marks tests related to data extraction
    maintenance: marks tests related to maintenance tasks

# Filtering
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Test environment
env =
    TESTING = true
    FLASK_ENV = testing
    DATABASE_URL = sqlite:///:memory:
    CELERY_BROKER_URL = memory://
    CELERY_RESULT_BACKEND = cache+memory://